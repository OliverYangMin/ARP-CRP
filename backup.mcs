--function Flight:new(row)
--    local self = {id = row[1], date = row[2] - 24, hbh = row[3], port1 = row[4], port2 = row[5], time1 = row[6] - 1440 * 24, time2 = row[7] - 1440 * 24,  old = row[9], tp = row[10], pass = row[11], revenue = row[12], water = row[13], atp = {row[14], row[15], row[16], row[17], row[18]}}
--    setmetatable(self, Flight)
--    return self
--end    


--function Flight:new(row)
--    local self = {id = row[1], date = row[2] - 24, hbh = row[3], port1 = row[4], port2 = row[5], time1 = row[6] - 1440 * 24, time2 = row[7] - 1440 * 24,  old = row[9], tp = row[10], pass = row[11], revenue = row[12], water = row[13], atp = {row[14], row[15], row[16], row[17], row[18]}}
--    setmetatable(self, Flight)
----    if (self.port1 == 'ZUUU' and self.time1 > 60 * 13 and self.time1 <= 60 * 20) or (self.port2 == 'ZUUU' and self.time2 > 60 * 13 and self.time2 <= 60 * 20) then
----        self.dis = true
----    end 
--    return self
--end     


--function Flight:getDelayCost(delay)
--    local cost = 0
--    if delay > 0 then
--        cost = cost + PENALTY[2] + PENALTY[5] * delay + evaluator:pass_delay_coeff(delay) * self.pass
--    end 
--    return cost
--end 

--function Flight:getCraftSwapCost(craft_id)
--    local cost = 0
--    if self.id ~= craft_id then
--        if self.tp ~= crafts[craft_id].tp then
--            cost = cost + PENALTY[4] --* TYPE_TYPE[crafts[craft_id].tp][self.tp]
--        end 
--        cost = cost + PENALTY[6] * math.max(0, self.pass - crafts[craft_id].seat)
--    end 
--    return cost 
--end 

--function Flight:generateDelaySet()
--    for i=10, 20 * 60,10 do
--        local flight = DeepCopy(self)
--        flight.time1, flight.time2 = flight.time1 + i, flight.time2 + i
--    end 
--end 

--function Craft:new(row)
--    local self = {id = row[1], tp = row[2], seat = row[3], rest = row[4], water = row[7], base = {}}
--    if row[5] ~= 0 then
--        self.fix = {row[5] - 1440 * 24, row[6] - 1440 * 24}
--    end 
----    for i=1,7 do
----        self.base[i] = row[7+i]
----    end 
--    setmetatable(self, Craft)
--    return self
--end     
--function Craft:convertLabels2Column()
--    for i,label in ipairs(self.fit_flights[#self.fit_flights].labels) do
--        if #label > 2 then 
--            local route = {cost = label.cost, craft = self.id}
--            for i=2,#label-1 do 
--                route[#route+1] = self.fit_flights[label[i]]
--            end 
--            routes[#routes+1] = route
--        end 
--    end
--    for i=1,#self.fit_flights do self.fit_flights[i].labels = {} end
--end 

--function getData()
--    flights = {}
--    local data = read_csv('00Data/flights_info.csv')
--    for i=1,#data do
--        flights[data[i][1]] = Flight:new(data[i])
--    end 

--    ports = {}
--    data = read_csv('00Data/airports_info.csv')
--    for i=1,#data do ports[data[i][1]] = Port:new(data[i]) end
    
--    crafts = {}
--    data = read_csv('00Data/aircrafts_info.csv')
--    for i=1,#data do crafts[data[i][1]] = Craft:new(data[i]) end 
    
--    local function getRotation(c)
--        local rotation = {}
--        for f,flight in pairs(flights) do
--            if flight.date >= 0 and flight.old == c then 
--                table.insert(rotation, flight) 
--            end 
--        end 
--        return rotation
--    end 
    
--    for c,craft in pairs(crafts) do
--        local rotation = getRotation(c)
--        if #rotation > 0 then
--            craft.base = rotation[#rotation].port2
--            craft.start = rotation[1].port1
--        else
--            craft[c] = nil
--        end 
--    end 
--end 





--    local start = 13 * 60 
--    for c,craft in pairs(crafts) do
--        local rotation = getRotation(c)   
--        local base = {}
--        local days = {}
--        for i=0,7 do
--            days[i] = {}
--        end 
        
--        for i=1,#rotation do
--            if rotation[i].date > 0 then
--                table.insert(days[rotation[i].date], i)
--            else
--                table.insert(days[0], i)
--            end 
--            if i < #rotation then
--                if rotation[i].hbh == rotation[i+1]].hbh then
--                    rotation[i].double = rotation[j+1].id
--                end 
--            end 
--        end 
        
--        for i=1,7 do
--            if #days[i] > 0 then
--                craft.start = rotation[days[i][1]].port1
--                break
--            end 
--        end 
        
--        if not craft.start then
--            if #days[0] > 0 then
--                craft.start = rotation[days[0][#days[0]]].port2
--            else
--                craft.start = 'ZUUU'
--                print('craft ', c, 'have no flights?')
--            end 
--        end 
        
--        for i=1,7 do
--            if #days[i] > 0 then
--                base[i] = rotation[days[i][#days[i]]].port2
--            else
--                if i == 1 then 
--                    if #days[0] > 0 then
--                        base[i] = rotation[days[0][#days[0]]].port2
--                    else
--                        base[i] = 'ZUUU'
--                    end 
--                else
--                    base[i] = base[i-1]
--                end 
--            end 
--        end 
        
--        if #days[1] == 0 then
--            craft.stime = start
--        else
--            for i,rid in ipairs(days[1]) do
--                if rotation[rid].time1 < start and rotation[rid].time2 + ports[rotation[rid].port2][craft.tp] > start then
--                    craft.stime = rotation[rid].time2 + ports[rotation[rid].port2][craft.tp]
--                    craft.start = rotation[rid].port2
--                    craft.inbound_slot_delay = rotation[rid].port2 == 'ZUUU' and craft.stime or 0
--                    craft.cut = math.floor(ports[rotation[rid].port2][craft.tp]/3)
--                end 
--                if rotation[rid].time1 >= start then
--                    craft.stime = start
--                    craft.start = rotation[rid].port1
----                    break
----                end 
----            end 
----        end   
----        craft.base = base
----    end 
----end 

----function getData()
----    flights = {}
----    local data = read_csv('00Data/flights_info.csv')
----    for i=1,#data do
------        if data[i][6] >= 24 *1440 + 13 * 60 then -- data[i][3] < 25 + DAYS  then
------            flights[#flights+1] = Flight:new(i, data[i])  -- could be changed flights
------        end 
        
----        if data[i][2] > 24 then --and data[i][2] < 25 + DAYS  then
------            local flight = Flight:new(i, data[i])
------            if flight.time1 >= 13 * 60 then
------                flights[#flights+1] = flight 
------            elseif flight.time2 
------            end 
----            flights[#flights+1] = Flight:new(i, data[i])
----        end 
----    end 

     
--    ports = {}
--    data = read_csv('00Data/airports_info.csv')
--    for i=1,#data do ports[data[i][1]] = Port:new(data[i]) end
    
--    crafts = {}
--    data = read_csv('00Data/aircrafts_info.csv')
--    for i=1,#data do crafts[data[i][1]] = Craft:new(data[i]) end 
   

--    mcrafts = {}
--    mflights = {}
--    for c,craft in pairs(crafts) do
--        local rotation = {}
--        for f,flight in ipairs(flights) do
--            if flight.old == c then
--                rotation[#rotation+1] = f
--                if flight.dis and not mcrafts[c] then
--                    mcrafts[c] = craft
--                end 
--            end 
--        end
        
--        for j=1,#rotation-1 do
--            if flights[rotation[j]].hbh == flights[rotation[j+1]].hbh then
--                flights[rotation[j]].double = rotation[j+1]
--            end 
--        end 
        
--        if mcrafts[c] then
--            for i=1,#rotation do
--                mflights[#mflights+1] = flights[rotation[i]]
--            end 
--        end     
--    end 
--    flights = mflights
--    crafts = mcrafts
--end 

--function Master:SetObjFunction()
--    for f,flight in pairs(flights) do -- no double flight cancel: both cancel or single cancel
--        self.obj[#self.obj+1] = P[1] + (P[6] - 1.5) * flight.pass
--    end 
--    ---the cost for every route has been found
--    for i=1,#columns do
--        obj[#obj+1] = columns[i]:getCost()
--    end 
--    SetObjFunction(self.lp, obj, 'min')
--end 

--function Master:AddConstraint()
--    local coeff, changed = {}, {}
--    for j=1,#self.obj do coeff[j] = 0 end 
--    local function resetCoeff()
--        for i=1,#changed do
--            coeff[changed[i]] = 0
--        end 
--        changed = {}
--    end  
--    ---constraint 1 every flight been execute by only one route or be canceled
--    for i=1,#flights do
--        coeff[i] = 1
--        changed[#changed+1] = i
--        for j=1,#columns do
--            if columns[j]:isIn(flights[i]) then 
--                coeff[#flights + j] = 1
--                changed[#changed+1] = #flights + 1
--            end 
--        end 
--        AddConstraint(self.lp, coeff, '=', 1)
--        resetCoeff()
--    end
--    ---constraint 2 every flight been execute by only one route or be canceled
--    for cid,craft in pairs(crafts) do
--        for j=1,#columns do 
--            if columns[j].craft == cid then 
--                coeff[#flights+j] = 1
--                changed[#changed+1] = #flights + 1
--            end 
--        end 
--        AddConstraint(master, coeff, '<=', 1)
--        resetCoeff()
--    end 
    
--    for t=13*60,15*60-10,10 do
--        for i=1,#columns do
--            coeff[i] = columns[i]:isInSlot(t)
--            changed[#changed+1] = i
--        end 
--        AddConstraint(self.lp, coeff, '<=', 1)
--        resetCoeff()
--    end 
    
--    for t=15*60,17*60-10,10 do
--        for i=1,#columns do
--            coeff[i] = slot_used(columns[i], 2)
--            changed[#changed+1] = i
--        end 
--        AddConstraint(self.lp, coeff, '<=', 2)
--        resetCoeff()
--    end 
    
--    for t=17*60,20*60-10,10 do
--        for i=1,#columns do
--            coeff[i] = slot_used(columns[i], 3)
--            changed[#changed+1] = i
--        end 
--        AddConstraint(self.lp, coeff, '<=', 3)
--        resetCoeff()
--    end 

--    for d=1,1 do --1,7
----        for i=1,#columns do
----            coeff[#flights + i] = columns[i].cut
----            changed[#changed+1] = #flights + i
----        end 
----        AddConstraint(master, coeff, '<=', math.floor(0.05 * dayFlights[d]))
----        resetCoeff()
        
--        for i=1,#flights do
--            if flights[i].date == d then
--                coeff[i] = 1
--                changed[#changed+1] = i
--            end
--        end 
--        AddConstraint(master, coeff, '<=', math.floor(0.1 * dayFlights[d]))    
--        resetCoeff()
--    end
--end 

--function Column:new(craft_id, delay)
--    local self = {craft = craft_id} --, delay = delay}
--    setmetatable(self, Column)
--    if not self.delay then
--        self.delay = {}
--        for i=1,#self do
--            self.delay[i] = 0
--        end 
--    end 
    
--    self.isEnterDelay = false
--    return self
--end 

--function Column:isInboundSlot(time_slot)
--    local time = 0
--    for i=1,#self
--        local flight = flights[self[i]]
--        local delay = math.max(0, time + self.delay[i] - flight.time1) 
--        if flight.time2 + delay > time_slot and flight.time2 + delay <= time_slot + 10 then
--            return true
--        end 
--        time = flight.time2 + delay + ports[flight.port2][craft.tp]
--    end 
--    return false
--end 

--function Column:isOutboundSlot(time_slot)
--    for i=1,#self
--        if 
--    end 
--    return false
--end 